
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 08 23:04:09 GMT-04:00 2017
//----------------------------------------------------

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 08 23:04:09 GMT-04:00 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\013\023\000\002\014\012" +
    "\000\002\014\010\000\002\012\005\000\002\015\017\000" +
    "\002\020\003\000\002\020\004\000\002\024\003\000\002" +
    "\024\004\000\002\021\003\000\002\021\005\000\002\016" +
    "\004\000\002\022\003\000\002\022\004\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\011\000\002" +
    "\003\007\000\002\003\007\000\002\003\011\000\002\003" +
    "\005\000\002\010\003\000\002\010\004\000\002\004\006" +
    "\000\002\005\005\000\002\006\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\006\000\002\006\005\000\002\006\003" +
    "\000\002\006\007\000\002\006\006\000\002\006\004\000" +
    "\002\006\003\000\002\006\010\000\002\006\007\000\002" +
    "\023\003\000\002\023\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\006\010\001\002\000\004\002\225\001" +
    "\002\000\006\002\uffff\006\221\001\002\000\006\002\ufffe" +
    "\006\221\001\002\000\006\002\ufff6\006\ufff6\001\002\000" +
    "\004\050\011\001\002\000\030\021\uffcc\025\uffcc\030\uffcc" +
    "\032\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\047" +
    "\uffcc\050\uffcc\001\002\000\006\030\013\042\014\001\002" +
    "\000\004\050\011\001\002\000\012\005\021\021\023\025" +
    "\022\050\020\001\002\000\004\050\011\001\002\000\012" +
    "\005\164\021\023\025\022\050\020\001\002\000\024\004" +
    "\ufff1\005\ufff1\014\ufff1\015\ufff1\020\ufff1\021\ufff1\025\ufff1" +
    "\042\ufff1\050\ufff1\001\002\000\004\050\uffec\001\002\000" +
    "\004\007\026\001\002\000\004\050\uffee\001\002\000\006" +
    "\044\024\050\uffed\001\002\000\004\045\025\001\002\000" +
    "\004\050\uffef\001\002\000\004\012\027\001\002\000\004" +
    "\011\030\001\002\000\004\037\031\001\002\000\004\022" +
    "\032\001\002\000\004\044\033\001\002\000\004\045\034" +
    "\001\002\000\004\050\011\001\002\000\004\040\036\001" +
    "\002\000\004\042\037\001\002\000\016\004\041\014\046" +
    "\015\040\020\043\042\045\050\011\001\002\000\004\037" +
    "\155\001\002\000\022\013\054\017\061\023\060\024\056" +
    "\026\063\037\064\050\062\051\055\001\002\000\024\004" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\027\uffea\042\uffea" +
    "\043\uffea\050\uffea\001\002\000\004\037\147\001\002\000" +
    "\006\032\137\044\136\001\002\000\016\004\041\014\046" +
    "\015\040\020\043\042\045\050\011\001\002\000\004\037" +
    "\053\001\002\000\004\043\051\001\002\000\024\004\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\020\uffeb\027\uffeb\042\uffeb\043" +
    "\uffeb\050\uffeb\001\002\000\004\043\052\001\002\000\006" +
    "\002\ufffd\006\ufffd\001\002\000\022\013\054\017\061\023" +
    "\060\024\056\026\063\037\064\050\062\051\055\001\002" +
    "\000\006\021\123\050\011\001\002\000\030\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\001\002\000\030\031\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\001\002\000\022\031\072\033" +
    "\074\034\070\035\071\036\073\040\117\044\075\046\066" +
    "\001\002\000\030\031\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\040\uffda\041\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\001\002\000\030\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\040\uffd5\041\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\001\002\000\030\031\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\001\002\000\022\013\054\017\061\023\060\024\056\026" +
    "\063\037\064\050\062\051\055\001\002\000\022\013\054" +
    "\017\061\023\060\024\056\026\063\037\064\050\062\051" +
    "\055\001\002\000\022\031\072\033\074\034\070\035\071" +
    "\036\073\040\067\044\075\046\066\001\002\000\006\010" +
    "\105\050\011\001\002\000\030\031\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\001\002\000\022\013\054\017\061\023\060" +
    "\024\056\026\063\037\064\050\062\051\055\001\002\000" +
    "\022\013\054\017\061\023\060\024\056\026\063\037\064" +
    "\050\062\051\055\001\002\000\022\013\054\017\061\023" +
    "\060\024\056\026\063\037\064\050\062\051\055\001\002" +
    "\000\022\013\054\017\061\023\060\024\056\026\063\037" +
    "\064\050\062\051\055\001\002\000\022\013\054\017\061" +
    "\023\060\024\056\026\063\037\064\050\062\051\055\001" +
    "\002\000\022\013\054\017\061\023\060\024\056\026\063" +
    "\037\064\050\062\051\055\001\002\000\022\031\072\033" +
    "\074\034\070\035\071\036\073\044\075\045\077\046\066" +
    "\001\002\000\030\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\001\002\000\030\031\uffdd\033\uffdd\034\070\035\071\036" +
    "\073\040\uffdd\041\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\001\002\000\030\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\001\002\000\030\031\uffdf\033\074\034\070\035\071\036" +
    "\073\040\uffdf\041\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\001\002\000\030\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\073\040\uffd9\041\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\001\002\000\030\031\uffdc\033\uffdc\034\uffdc\035\071\036" +
    "\073\040\uffdc\041\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\001\002\000\030\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\001\002\000\004\037\107\001\002\000\024\013\054\017" +
    "\061\023\060\024\056\026\063\037\064\040\112\050\062" +
    "\051\055\001\002\000\024\031\072\033\074\034\070\035" +
    "\071\036\073\040\uffce\044\075\046\066\047\uffce\001\002" +
    "\000\006\040\114\047\113\001\002\000\030\031\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\001\002\000\022\013\054\017" +
    "\061\023\060\024\056\026\063\037\064\050\062\051\055" +
    "\001\002\000\030\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\001\002\000\024\031\072\033\074\034\070\035\071\036" +
    "\073\040\uffcd\044\075\046\066\047\uffcd\001\002\000\030" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\073\040\uffd2\041" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\016" +
    "\004\041\014\046\015\040\020\043\042\045\050\011\001" +
    "\002\000\004\016\121\001\002\000\016\004\041\014\046" +
    "\015\040\020\043\042\045\050\011\001\002\000\024\004" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\027\uffe9\042\uffe9" +
    "\043\uffe9\050\uffe9\001\002\000\004\044\127\001\002\000" +
    "\004\037\125\001\002\000\004\040\126\001\002\000\030" +
    "\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002\000\022" +
    "\013\054\017\061\023\060\024\056\026\063\037\064\050" +
    "\062\051\055\001\002\000\022\031\072\033\074\034\070" +
    "\035\071\036\073\044\075\045\131\046\066\001\002\000" +
    "\030\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4" +
    "\041\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\001\002\000" +
    "\020\004\041\014\046\015\040\020\043\042\045\043\135" +
    "\050\011\001\002\000\022\004\uffe4\014\uffe4\015\uffe4\020" +
    "\uffe4\027\uffe4\042\uffe4\043\uffe4\050\uffe4\001\002\000\022" +
    "\004\uffe3\014\uffe3\015\uffe3\020\uffe3\027\uffe3\042\uffe3\043" +
    "\uffe3\050\uffe3\001\002\000\024\004\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\020\uffe5\027\uffe5\042\uffe5\043\uffe5\050\uffe5\001" +
    "\002\000\022\013\054\017\061\023\060\024\056\026\063" +
    "\037\064\050\062\051\055\001\002\000\022\013\054\017" +
    "\061\023\060\024\056\026\063\037\064\050\062\051\055" +
    "\001\002\000\022\031\072\033\074\034\070\035\071\036" +
    "\073\041\141\044\075\046\066\001\002\000\024\004\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\020\uffe2\027\uffe2\042\uffe2\043" +
    "\uffe2\050\uffe2\001\002\000\022\031\072\033\074\034\070" +
    "\035\071\036\073\044\075\045\143\046\066\001\002\000" +
    "\004\032\144\001\002\000\022\013\054\017\061\023\060" +
    "\024\056\026\063\037\064\050\062\051\055\001\002\000" +
    "\022\031\072\033\074\034\070\035\071\036\073\041\146" +
    "\044\075\046\066\001\002\000\024\004\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\027\uffe6\042\uffe6\043\uffe6\050\uffe6" +
    "\001\002\000\022\013\054\017\061\023\060\024\056\026" +
    "\063\037\064\050\062\051\055\001\002\000\022\031\072" +
    "\033\074\034\070\035\071\036\073\040\151\044\075\046" +
    "\066\001\002\000\004\041\152\001\002\000\024\004\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\020\uffe7\027\uffe7\042\uffe7\043" +
    "\uffe7\050\uffe7\001\002\000\022\031\072\033\074\034\070" +
    "\035\071\036\073\041\154\044\075\046\066\001\002\000" +
    "\024\004\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\027\uffe1" +
    "\042\uffe1\043\uffe1\050\uffe1\001\002\000\022\013\054\017" +
    "\061\023\060\024\056\026\063\037\064\050\062\051\055" +
    "\001\002\000\022\031\072\033\074\034\070\035\071\036" +
    "\073\040\157\044\075\046\066\001\002\000\016\004\041" +
    "\014\046\015\040\020\043\042\045\050\011\001\002\000" +
    "\024\004\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\027\uffe8" +
    "\042\uffe8\043\uffe8\050\uffe8\001\002\000\006\005\164\043" +
    "\210\001\002\000\024\004\ufff0\005\ufff0\014\ufff0\015\ufff0" +
    "\020\ufff0\021\ufff0\025\ufff0\042\ufff0\050\ufff0\001\002\000" +
    "\006\005\ufff8\043\ufff8\001\002\000\010\021\023\025\022" +
    "\050\020\001\002\000\004\050\011\001\002\000\004\037" +
    "\167\001\002\000\010\021\023\025\022\050\020\001\002" +
    "\000\010\021\023\025\022\050\020\001\002\000\004\050" +
    "\011\001\002\000\014\021\ufff2\025\ufff2\040\ufff2\047\ufff2" +
    "\050\ufff2\001\002\000\006\040\176\047\175\001\002\000" +
    "\006\040\ufff4\047\ufff4\001\002\000\010\021\023\025\022" +
    "\050\020\001\002\000\004\042\177\001\002\000\010\021" +
    "\023\025\022\050\020\001\002\000\022\004\041\014\046" +
    "\015\040\020\043\021\023\025\022\042\045\050\202\001" +
    "\002\000\020\004\041\014\046\015\040\020\043\027\203" +
    "\042\045\050\011\001\002\000\010\032\uffcc\044\uffcc\050" +
    "\uffec\001\002\000\022\013\054\017\061\023\060\024\056" +
    "\026\063\037\064\050\062\051\055\001\002\000\022\031" +
    "\072\033\074\034\070\035\071\036\073\041\205\044\075" +
    "\046\066\001\002\000\006\005\ufff9\043\ufff9\001\002\000" +
    "\006\040\ufff3\047\ufff3\001\002\000\006\005\ufff7\043\ufff7" +
    "\001\002\000\006\002\ufffb\006\ufffb\001\002\000\004\041" +
    "\212\001\002\000\024\004\ufffa\005\ufffa\014\ufffa\015\ufffa" +
    "\020\ufffa\021\ufffa\025\ufffa\042\ufffa\050\ufffa\001\002\000" +
    "\004\042\214\001\002\000\010\021\023\025\022\050\020" +
    "\001\002\000\012\005\164\021\023\025\022\050\020\001" +
    "\002\000\006\005\164\043\217\001\002\000\006\002\ufffc" +
    "\006\ufffc\001\002\000\006\002\ufff5\006\ufff5\001\002\000" +
    "\004\050\011\001\002\000\006\030\013\042\223\001\002" +
    "\000\010\021\023\025\022\050\020\001\002\000\006\002" +
    "\001\006\221\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\012\002\003\013\004\014\006\024\005\001" +
    "\001\000\002\001\001\000\006\014\006\024\223\001\001" +
    "\000\004\014\217\001\001\000\002\001\001\000\004\007" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\212\001\001\000\010\011\014\012\016\022\015\001" +
    "\001\000\004\007\210\001\001\000\012\011\014\012\161" +
    "\015\162\020\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\046\004\047" +
    "\005\041\007\043\001\001\000\002\001\001\000\004\006" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\132\004\047\005\041\007\043\010" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\056\001\001\000\004\007\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\115\001\001" +
    "\000\004\006\064\001\001\000\002\001\001\000\004\007" +
    "\105\001\001\000\002\001\001\000\004\006\103\001\001" +
    "\000\004\006\102\001\001\000\004\006\101\001\001\000" +
    "\004\006\100\001\001\000\004\006\077\001\001\000\004" +
    "\006\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\107\023\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\117\004\047\005\041\007\043\001\001\000" +
    "\002\001\001\000\012\003\121\004\047\005\041\007\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\133\004\047\005\041\007\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\141\001" +
    "\001\000\004\006\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\155\001\001\000\002\001\001\000\012\003\157\004" +
    "\047\005\041\007\043\001\001\000\002\001\001\000\004" +
    "\015\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\164\001\001\000\004\007\165\001\001\000\002" +
    "\001\001\000\006\011\170\016\167\001\001\000\010\011" +
    "\170\016\173\021\172\001\001\000\004\007\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\170\016\205\001\001\000\002\001\001\000\010" +
    "\011\014\012\016\022\177\001\001\000\020\003\132\004" +
    "\047\005\041\007\043\010\200\011\014\012\161\001\001" +
    "\000\012\003\133\004\047\005\041\007\043\001\001\000" +
    "\002\001\001\000\004\006\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\014\012\016\022\214\001\001\000" +
    "\012\011\014\012\161\015\162\020\215\001\001\000\004" +
    "\015\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\221\001\001\000\002\001\001\000\010\011\014" +
    "\012\016\022\015\001\001\000\004\014\217\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /* Override default error message routine to handle line numbers correctly */
  /* This routine is also called in the process of handling fatal errors. */

  /** Report a non fatal error (or warning).  This method takes a message 
   *  string and an additional object (to be used by specializations 
   *  implemented in subclasses).  Prints the same simple error message
   *  as the base class version, but correctly labels the line number.
   *
   * @param message an error message.
   * @param info    an extra object reserved for use by specialized subclasses.
   */
  public void report_error(String message, Object info)
    {
      System.err.print(message);
      System.err.flush();
      if (info instanceof Symbol)
	if (((Symbol)info).left != -1)
	  System.err.println(" at line " + ((Symbol)info).left +
			     " of input");
	else System.err.println("");
      else System.err.println("");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpList ::= ExpList COMMA Expression 
            {
              ExpList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(e); 
          		RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpList ::= Expression 
            {
              ExpList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ExpList el = new ExpList(sleft);
		    	el.add(s);
			    RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= Expression POINT Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Call(expr, id, new ExpList(exprleft),exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= Expression POINT Identifier LPAREN ExpList RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList explist = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(exp, id ,explist,expleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= NUMBERS 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IntegerLiteral(n, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(expr,noleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(id, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NEW INT APOPPER Expression CPOPPER 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(expr, exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= THIS 
            {
              Exp RESULT =null;
		int thleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int thright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object th = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(thleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression POINT LENGTH 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(exp, expleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression APOPPER Expression CPOPPER 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLookup(expr, e2, exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression MINOR Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1,e2,e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new And(e1,e2,e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression MULT Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, arg1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, arg1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		int arg1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arg1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arg2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arg2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, arg1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(name, nameleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DisplayStatement ::= DISPLAY Expression SEMICOLON 
            {
              Display RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Display(expr, dleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisplayStatement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AssignStatement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Assign RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(id, expr, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStatement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList p = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 p.add(s); 
		          	RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StatementList ::= Statement 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 StatementList sl = new StatementList(sleft);
		          	 sl.add(s);
		             RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= AKEY StatementList CKEY 
            {
              Statement RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(sl, slleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= Identifier APOPPER Expression CPOPPER BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expr2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(id, expr1, expr2, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= PRINTLN LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(expr, exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(expr, s, exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(expr, s, s1, exprleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= DisplayStatement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Display s = (Display)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= AssignStatement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assign s = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(id.toString(),idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerType(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(bleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT APOPPER CPOPPER 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IntArrayType(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		vdl.add(vd);
			      RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= VarDecl 
            {
              VarDeclList RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		VarDeclList vdl = new VarDeclList(vdleft);
 				  vdl.add(vd);
				  RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Formal ::= Type Identifier 
            {
              Formal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Formal(t,id, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FormalList ::= FormalList COMMA Formal 
            {
              FormalList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		fl.add(f);
				RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalList ::= Formal 
            {
              FormalList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		FormalList fl = new FormalList(fleft);
				 fl.add(f);
			     RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ClassDeclList ::= ClassDeclList ClassDecl 
            {
              ClassDeclList RESULT =null;
		int cldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclList cld = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cld.add(cd);
				 RESULT = cld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ClassDeclList ::= ClassDecl 
            {
              ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ClassDeclList cld = new ClassDeclList(cdleft);
				 cld.add(cd);
				 RESULT = cld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT =null;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mdl.add(m); 
          	RESULT = mdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclList ::= MethodDecl 
            {
              MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		MethodDeclList mdl = new MethodDeclList(mdleft);
            mdl.add(md);
            RESULT = mdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MethodDecl ::= PUBLIC Type Identifier LPAREN Formal FormalList RPAREN AKEY VarDeclList StatementList RETURN Expression SEMICOLON 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodDecl(type, id, fl, vdl, sl, exp, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t,id, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= CLASS Identifier AKEY VarDeclList MethodDeclList CKEY 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vdl, mdl, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDecl ::= CLASS Identifier EXTENDS Identifier AKEY VarDeclList MethodDeclList CKEY 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ClassDeclExtends(id, id2, vdl, mdl, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MainClass ::= CLASS Identifier AKEY PUBLIC STATIC VOID MAIN LPAREN STRING APOPPER CPOPPER Identifier RPAREN AKEY Statement CKEY CKEY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new MainClass(id1,id2,s,id1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= ClassDeclList 
            {
              Program RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(null,cdl, cdlleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MainClass 
            {
              Program RESULT =null;
		int mainclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClass mainclass = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(mainclass, new ClassDeclList(mainclassleft),mainclassleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MainClass ClassDeclList 
            {
              Program RESULT =null;
		int mainclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass mainclass = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(mainclass,cdl,mainclassleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

